.
├── ansible-config-postgresql
│   ├── ansible.cfg
│   ├── inventory.ini
│   └── playbooks
│       └── postgresql.yaml
├── README.md
└── terraform-provision-postgresql
    ├── main.tf
    ├── outputs.tf
    ├── README.md
    └── variables.tf

3 directories, 8 files

--- ./README.md ---
# HA Proxy setup

## VM provision through Terraform

```bash
cd terraform-provision-postgresql
terraform init -upgrade
terraform apply -parallelism=1 -lock=false
```

## HA Proxy config

```bash
cd ansible-config-postgresql
ansible-playbook -i inventory.ini playbooks/postgresql.yaml
```

## Access

To access postgresql db do:

```bash
docker run -it --rm postgres:17 psql -h 192.168.0.117 -p 15432 -U kairos -d postgres
# Password for user kairos: kairos
```

--- ./ansible-config-postgresql/playbooks/postgresql.yaml ---
- name: Install and run PostgreSQL in a container (bridge mode, idempotent)
  hosts: postgresql
  become: true
  vars:
    pg_user: kairos
    pg_password: kairos
    pgdata_path: /var/lib/postgresql/data/pgdata
    pgdata_volume_path: /opt/postgres
    pg_port: 15432

  tasks:
    - name: Stop and remove old PostgreSQL container
      community.docker.docker_container:
        name: postgres
        state: absent
        force_kill: true

    - name: Remove PostgreSQL data directory
      file:
        path: "{{ pgdata_volume_path }}"
        state: absent

    - name: Recreate PostgreSQL data directory
      file:
        path: "{{ pgdata_volume_path }}"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Run PostgreSQL 17 container
      community.docker.docker_container:
        name: postgres
        image: postgres:17
        restart_policy: always
        published_ports:
          - "{{ pg_port }}:5432"
        env:
          POSTGRES_USER: "{{ pg_user }}"
          POSTGRES_PASSWORD: "{{ pg_password }}"
          PGDATA: "{{ pgdata_path }}"
        volumes:
          - "{{ pgdata_volume_path }}:{{ pgdata_path }}"
        state: started

--- ./ansible-config-postgresql/inventory.ini ---
[postgresql]
192.168.0.117 ansible_user=user ansible_ssh_private_key_file=~/.ssh/id_ed25519

--- ./ansible-config-postgresql/ansible.cfg ---
[defaults]
host_key_checking = False

--- ./terraform-provision-postgresql/main.tf ---
terraform {
  required_providers {
    proxmox = {
      source  = "Telmate/proxmox"
      version = "3.0.1-rc1"
    }
  }
}

provider "proxmox" {
  pm_api_url          = var.proxmox_api_url
  pm_api_token_id     = var.proxmox_api_token_id
  pm_api_token_secret = var.proxmox_api_token_secret
  pm_tls_insecure     = true
}

resource "proxmox_vm_qemu" "postgresql" {
  count       = 1
  name        = "postgresql"
  target_node = "proxmox"
  clone       = "ubuntu-22-template"

  cores  = 2
  memory = 4000

  disks {
    virtio {
      virtio0 {
        disk {
          storage = "local-lvm"
          size    = "20"
        }
      }
    }
  }

  network {
    model  = "virtio"
    bridge = "vmbr0"
  }

  agent = 1
  onboot = true

  # Assign a static IP
  ipconfig0 = "ip=192.168.0.190/24,gw=192.168.0.1"
}

--- ./terraform-provision-postgresql/README.md ---
# VM provisioning

## Installation

```bash
terraform init -upgrade
terraform apply -parallelism=1 -lock=false
```

--- ./terraform-provision-postgresql/outputs.tf ---

--- ./terraform-provision-postgresql/.envrc ---
export TF_VAR_proxmox_api_url="https://192.168.0.132:8006/api2/json"
export TF_VAR_proxmox_api_token_id=`pass PROXMOX_TOKEN_ID`
export TF_VAR_proxmox_api_token_secret=`pass PROXMOX_SECRET_TOKEN`
export TF_VAR_ssh_user="user"
export TF_VAR_ssh_private_key="~/.ssh/id_ed25519"
export TF_LOG=DEBUG

--- ./terraform-provision-postgresql/variables.tf ---
variable "proxmox_api_url" {
  type = string
}

variable "proxmox_api_token_id" {
  type = string
}

variable "proxmox_api_token_secret" {
  type      = string
  sensitive = true
}

variable "ssh_user" {
  type = string
}

variable "ssh_private_key" {
  type      = string
  sensitive = true
}
